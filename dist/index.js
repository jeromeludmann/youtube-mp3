'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _regenerator=require('babel-runtime/regenerator');var _regenerator2=_interopRequireDefault(_regenerator);var _getIterator2=require('babel-runtime/core-js/get-iterator');var _getIterator3=_interopRequireDefault(_getIterator2);var _asyncToGenerator2=require('babel-runtime/helpers/asyncToGenerator');var _asyncToGenerator3=_interopRequireDefault(_asyncToGenerator2);var _getPrototypeOf=require('babel-runtime/core-js/object/get-prototype-of');var _getPrototypeOf2=_interopRequireDefault(_getPrototypeOf);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require('babel-runtime/helpers/possibleConstructorReturn');var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _inherits2=require('babel-runtime/helpers/inherits');var _inherits3=_interopRequireDefault(_inherits2);var _fs=require('fs');var _fs2=_interopRequireDefault(_fs);var _path=require('path');var _path2=_interopRequireDefault(_path);var _url=require('url');var _url2=_interopRequireDefault(_url);var _events=require('events');var _events2=_interopRequireDefault(_events);var _rimraf=require('rimraf');var _rimraf2=_interopRequireDefault(_rimraf);var _download=require('./download');var _encode=require('./encode');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var YoutubeToMP3=function(_EventEmitter){(0,_inherits3.default)(YoutubeToMP3,_EventEmitter);function YoutubeToMP3(_ref){var _ref$output=_ref.output,output=_ref$output===undefined?'':_ref$output,_ref$videos=_ref.videos,videos=_ref$videos===undefined?null:_ref$videos,_ref$videoUrl=_ref.videoUrl,videoUrl=_ref$videoUrl===undefined?null:_ref$videoUrl,_ref$verbose=_ref.verbose,verbose=_ref$verbose===undefined?false:_ref$verbose;(0,_classCallCheck3.default)(this,YoutubeToMP3);var _this=(0,_possibleConstructorReturn3.default)(this,(YoutubeToMP3.__proto__||(0,_getPrototypeOf2.default)(YoutubeToMP3)).call(this,output,videos));_this.output=output.trim();if(videos&&videoUrl){throw new Error('videos OR videoUrl should be given, not both')}_this.videos=!videos||videos.length===0?[{url:videoUrl}]:videos;_this.verbose=verbose;return _this}(0,_createClass3.default)(YoutubeToMP3,[{key:'run',value:function(){var _ref2=(0,_asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(){var _this2=this;var youtubeId,downloadedFile,_iteratorNormalCompletion,_didIteratorError,_iteratorError,_iterator,_step,video,encodedFiles,defaultSlice,timestamp,k,slice;return _regenerator2.default.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:youtubeId=null;downloadedFile=null;_context.prev=2;if(!_fs2.default.existsSync(this.output)){_fs2.default.mkdirSync(this.output)}_iteratorNormalCompletion=true;_didIteratorError=false;_iteratorError=undefined;_context.prev=7;_iterator=(0,_getIterator3.default)(this.videos);case 9:if(_iteratorNormalCompletion=(_step=_iterator.next()).done){_context.next=43;break}video=_step.value;video.url=video.url.trim();// 'youtubeId' is used as a key to identify the different slices
// if we decide to parallelize the Youtube calls in the next releases.
youtubeId=this.getIdFromYoutubeUrl(video.url);_context.next=15;return(0,_download.downloadFromYoutube)({key:youtubeId,url:video.url,target:_path2.default.resolve(this.output,'tmp','youtube_'+youtubeId+'.%(ext)s'),verbose:this.verbose},function(key,outputLine){return _this2.emit('downloading',key,outputLine)});case 15:downloadedFile=_context.sent;this.emit('downloaded',youtubeId,downloadedFile);encodedFiles=[];// in all cases, we create at least one slice with default tags
if(!video.slices){video.slices=[]}if(video.slices.length===0){defaultSlice={};defaultSlice.tags=video.tags;video.slices.push(defaultSlice)}timestamp=Date.now();_context.t0=_regenerator2.default.keys(video.slices);case 22:if((_context.t1=_context.t0()).done){_context.next=39;break}k=_context.t1.value;slice=video.slices[k];// avoid specifying "end" if the next "start" value is the same
if(slice.end==='next'){if(k<video.slices.length-1){slice.end=video.slices[Number(k)+1].start}else{delete slice.end}}// inherit tags from related video/slices if needed
video.tags=video.tags||{};slice.tags=slice.tags||{};slice.tags.artist=slice.tags.artist||video.tags.artist;slice.tags.album=slice.tags.album||video.tags.album;slice.tags.title=slice.tags.title||video.tags.title;slice.tags.track=Number(k)+1;_context.t2=encodedFiles;_context.next=35;return(0,_encode.encodeToMp3)({key:youtubeId,sourceFile:downloadedFile,quality:video.quality,slice:slice,target:_path2.default.resolve(this.output,'youtube_'+youtubeId+'_'+timestamp),withTrackNumber:video.slices.length>1,verbose:this.verbose},function(key,outputLine){return _this2.emit('encoding',key,outputLine)});case 35:_context.t3=_context.sent;_context.t2.push.call(_context.t2,_context.t3);_context.next=22;break;case 39:this.emit('encoded',youtubeId,encodedFiles);case 40:_iteratorNormalCompletion=true;_context.next=9;break;case 43:_context.next=49;break;case 45:_context.prev=45;_context.t4=_context['catch'](7);_didIteratorError=true;_iteratorError=_context.t4;case 49:_context.prev=49;_context.prev=50;if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return()}case 52:_context.prev=52;if(!_didIteratorError){_context.next=55;break}throw _iteratorError;case 55:return _context.finish(52);case 56:return _context.finish(49);case 57:_context.next=62;break;case 59:_context.prev=59;_context.t5=_context['catch'](2);this.emit('error',youtubeId,_context.t5);case 62:_context.prev=62;// Remove temporary folder
(0,_rimraf2.default)(_path2.default.resolve(this.output,'tmp'),function(){console.log('tmp removed')});return _context.finish(62);case 65:case'end':return _context.stop();}}},_callee,this,[[2,59,62,65],[7,45,49,57],[50,,52,56]])}));function run(){return _ref2.apply(this,arguments)}return run}()},{key:'getIdFromYoutubeUrl',value:function getIdFromYoutubeUrl(youtubeUrl){return youtubeUrl.includes('youtu.be')?_url2.default.parse(youtubeUrl,false).pathname.slice(1):_url2.default.parse(youtubeUrl,true).query.v}}]);return YoutubeToMP3}(_events2.default);exports.default=YoutubeToMP3;